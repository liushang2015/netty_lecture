/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-11-27")
public class DataExceotion extends org.apache.thrift.TException implements org.apache.thrift.TBase<DataExceotion, DataExceotion._Fields>, java.io.Serializable, Cloneable, Comparable<DataExceotion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataExceotion");

  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CALL_STACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callStack", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATEL_FIELD_DESC = new org.apache.thrift.protocol.TField("datel", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DataExceotionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DataExceotionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String message; // optional
  public @org.apache.thrift.annotation.Nullable String callStack; // optional
  public @org.apache.thrift.annotation.Nullable String datel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "message"),
    CALL_STACK((short)2, "callStack"),
    DATEL((short)3, "datel");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 2: // CALL_STACK
          return CALL_STACK;
        case 3: // DATEL
          return DATEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MESSAGE,_Fields.CALL_STACK,_Fields.DATEL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.CALL_STACK, new org.apache.thrift.meta_data.FieldMetaData("callStack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.DATEL, new org.apache.thrift.meta_data.FieldMetaData("datel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataExceotion.class, metaDataMap);
  }

  public DataExceotion() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataExceotion(DataExceotion other) {
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetCallStack()) {
      this.callStack = other.callStack;
    }
    if (other.isSetDatel()) {
      this.datel = other.datel;
    }
  }

  public DataExceotion deepCopy() {
    return new DataExceotion(this);
  }

  @Override
  public void clear() {
    this.message = null;
    this.callStack = null;
    this.datel = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getMessage() {
    return this.message;
  }

  public DataExceotion setMessage(@org.apache.thrift.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCallStack() {
    return this.callStack;
  }

  public DataExceotion setCallStack(@org.apache.thrift.annotation.Nullable String callStack) {
    this.callStack = callStack;
    return this;
  }

  public void unsetCallStack() {
    this.callStack = null;
  }

  /** Returns true if field callStack is set (has been assigned a value) and false otherwise */
  public boolean isSetCallStack() {
    return this.callStack != null;
  }

  public void setCallStackIsSet(boolean value) {
    if (!value) {
      this.callStack = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getDatel() {
    return this.datel;
  }

  public DataExceotion setDatel(@org.apache.thrift.annotation.Nullable String datel) {
    this.datel = datel;
    return this;
  }

  public void unsetDatel() {
    this.datel = null;
  }

  /** Returns true if field datel is set (has been assigned a value) and false otherwise */
  public boolean isSetDatel() {
    return this.datel != null;
  }

  public void setDatelIsSet(boolean value) {
    if (!value) {
      this.datel = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case CALL_STACK:
      if (value == null) {
        unsetCallStack();
      } else {
        setCallStack((String)value);
      }
      break;

    case DATEL:
      if (value == null) {
        unsetDatel();
      } else {
        setDatel((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return getMessage();

    case CALL_STACK:
      return getCallStack();

    case DATEL:
      return getDatel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    case CALL_STACK:
      return isSetCallStack();
    case DATEL:
      return isSetDatel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataExceotion)
      return this.equals((DataExceotion)that);
    return false;
  }

  public boolean equals(DataExceotion that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_callStack = true && this.isSetCallStack();
    boolean that_present_callStack = true && that.isSetCallStack();
    if (this_present_callStack || that_present_callStack) {
      if (!(this_present_callStack && that_present_callStack))
        return false;
      if (!this.callStack.equals(that.callStack))
        return false;
    }

    boolean this_present_datel = true && this.isSetDatel();
    boolean that_present_datel = true && that.isSetDatel();
    if (this_present_datel || that_present_datel) {
      if (!(this_present_datel && that_present_datel))
        return false;
      if (!this.datel.equals(that.datel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetCallStack()) ? 131071 : 524287);
    if (isSetCallStack())
      hashCode = hashCode * 8191 + callStack.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatel()) ? 131071 : 524287);
    if (isSetDatel())
      hashCode = hashCode * 8191 + datel.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DataExceotion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallStack()).compareTo(other.isSetCallStack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallStack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callStack, other.callStack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatel()).compareTo(other.isSetDatel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datel, other.datel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataExceotion(");
    boolean first = true;

    if (isSetMessage()) {
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetCallStack()) {
      if (!first) sb.append(", ");
      sb.append("callStack:");
      if (this.callStack == null) {
        sb.append("null");
      } else {
        sb.append(this.callStack);
      }
      first = false;
    }
    if (isSetDatel()) {
      if (!first) sb.append(", ");
      sb.append("datel:");
      if (this.datel == null) {
        sb.append("null");
      } else {
        sb.append(this.datel);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataExceotionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataExceotionStandardScheme getScheme() {
      return new DataExceotionStandardScheme();
    }
  }

  private static class DataExceotionStandardScheme extends org.apache.thrift.scheme.StandardScheme<DataExceotion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataExceotion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CALL_STACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callStack = iprot.readString();
              struct.setCallStackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datel = iprot.readString();
              struct.setDatelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataExceotion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callStack != null) {
        if (struct.isSetCallStack()) {
          oprot.writeFieldBegin(CALL_STACK_FIELD_DESC);
          oprot.writeString(struct.callStack);
          oprot.writeFieldEnd();
        }
      }
      if (struct.datel != null) {
        if (struct.isSetDatel()) {
          oprot.writeFieldBegin(DATEL_FIELD_DESC);
          oprot.writeString(struct.datel);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataExceotionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataExceotionTupleScheme getScheme() {
      return new DataExceotionTupleScheme();
    }
  }

  private static class DataExceotionTupleScheme extends org.apache.thrift.scheme.TupleScheme<DataExceotion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataExceotion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetCallStack()) {
        optionals.set(1);
      }
      if (struct.isSetDatel()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetCallStack()) {
        oprot.writeString(struct.callStack);
      }
      if (struct.isSetDatel()) {
        oprot.writeString(struct.datel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataExceotion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.callStack = iprot.readString();
        struct.setCallStackIsSet(true);
      }
      if (incoming.get(2)) {
        struct.datel = iprot.readString();
        struct.setDatelIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

